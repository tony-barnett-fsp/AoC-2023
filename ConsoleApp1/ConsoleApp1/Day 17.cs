using Microsoft.Win32.SafeHandles;
using System.Collections.Concurrent;
using System.Text;

namespace ConsoleApp1
{
    internal class Day17
    {
        private string _input = "143221352334432421513115115531526533362632513324364554127631271452576272352313734642762217437143541463635452254322415552343132332541225244334\r\n232224122515213234343213232225266535223642454432157765223362631471727224725433514675532722143475746311414234363235445634532455243532411134324\r\n434211123424411543334332142636222216655142344222672761227432126111437515747465667463152236426766314656313121424313621521641112315143254325312\r\n142233542332445332524455342216415323231264646775323527175456667615625464425746766771354666467261542113552215211452313626312115142125311223333\r\n334253231423335225541154151336514215462164446253115516645377524461331342411413735421513175332556364417746656124461524131363612211554242414513\r\n324442321532254331116315112614422233477263665256176764467633612465117654766546711516623645356422724366243443244534331132523662433244444321335\r\n425315223212514152234251224646342113377475455547365477243432266131145713635725565565224363637662213125111442654343546461216251352352125351414\r\n551314244425513422113166426636143113646244777635463222217132761546453233752624755325361773153271377455542444411543222654344143155535251111522\r\n311522331232533221554135413523337232143162524155327337226646224277321555182681471511773537771213455742732146426524231355112316213425515342232\r\n242424521433111445326143111131723212266363656716422271462361547382667266374465324134424371476613712265115516343732433466143316634325155351353\r\n425331513413234565343243415614273326767343271131326626718325716424225377817587416785634485151324344631423635316724133323564161466113311345223\r\n522134122235335521512311324644131725113527137214775315277622525487788435776352763478484172832547412537674653523157673342353325562651313232421\r\n221414552525112441131655652342251425371362647565538487535456573663218625322522386752814574863328337251421766143325236324543441556346111453512\r\n452523421343231546344213434664765354341213333168655618253525871761346764616686215334312268423256274715723341117517111631443135356614443524335\r\n331451346446152354616424373136532267547626722644117272175243748723882581426152328867318264548335712773133224653756765352422422366426426424335\r\n424313366263654542553252725662433772633737223738154186856788286846558482586844584243628163638248677562537373711755277315566163225511536115455\r\n531315555656361266365734673567771735227383314854762626366311364772635588333184411216651317186571443744541532566263256657371552321165636141254\r\n443354224514136613465774262775373323266381242442173266183165721334654865475268134251376545171183272356758741526262422522671356543243465315143\r\n121452125152215221151613265273462641338575326575677512425711167818539747878747257234361146361461418255434177537671367614232533534634156431513\r\n423362211464654542654353777577245225252681544147342768823753977346884321554142148275412775784273184156652888614463327445446336535566161533141\r\n132463231242333431554434717241736532345381244414242747655863163369725851355738617498227568764371376546137662615523715113176145424161266633244\r\n534246646241256425346547743463725763286184455846218658784741851131585776744863794498861126548527827885771112248356345665237467321534335545524\r\n531223516211436317612454626637324574468177614358462335742147985981796511934199163745592998756384377828623337434277122745235775664511152355334\r\n425545124355665221113412141318623118515613473441581856622377687445812195487837995452868777189532588852771367128185431553244455345655422455255\r\n424245354234545573362264266768157558864127346775276671753964846181579519465752428192868674875985414356275818782261467316225143467434416256436\r\n414241351164565653572263537173838665462682464626568659371367768917712942795494412759288966992793534444872586763745612346664372426715246121354\r\n436455414241712744646321511245684278622836441856174946586538216434529178925159945188596719633676548887643358723541172665367575543373522413535\r\n564434343165751427425553678436625837373583111821939241174311284493176159765817245613341345945993467533231177435765688832122346316477524611132\r\n464553122243543121566622785818374768515228853376789428355495119718994764675251922184355515824864121844637764471131146177665515154442452335551\r\n213261443456637647732313486737112827713542451798124235153117639886295827677795725848949327189371292722125437581818216877744313365125356365125\r\n212522433273724167324618611462667545367478153636791953973572627399632696736885757764499695476833663355211272768321166756354352742557674445121\r\n612121451176467621137441425674185481257334863488625375183238857675589776872884248437298452419535184317988448252844316527171541543144351321631\r\n455314366271212151542868747162751727667333862989335389137555632944879852228293245655346673235124133155935976582762162616845242751761457355165\r\n315334373642625211632218811848245414939657766463693453723464852899423456976664644843777943918331785723569899976432272436128771746764675464124\r\n521243325633327164425218135242324875138476162315271279888466574462447584348635553372879226841628335313582115361118672133146355225736743642336\r\n641564235541111625572456885411233159894773337821822554998556663575855763654853984659993366829856732892319122179136211315363122544243633735142\r\n461645127777653415214812731616838173484557525786426632543353434785373534827623628588248887288473215766133596486371484615627436737753547414632\r\n345413513354541433668885318832276532153481881644639748939894796767494948457835554624985626856423657134173775522934866413647232272675344452462\r\n143262624643752647711558618745271716769526869298569669363964675543388298274263375962958995648766329915329144428464361421362123127452172172123\r\n354651432457663636677456573257561344526666882326563846256497335628634277645348398456947937562835768966863728449189677382653644756532223611215\r\n454621456722413441576145811684953718395378745585376488772383493566436635543965739242682362824765367742543329875577635362641376375163633331162\r\n342456577367265785583431666218357759572274275455558756362575896593698479899464594683292537728657847576593558462428616718341426821745677662533\r\n614656326744234253314537865232263181198869896437582824454536378554656857974337357948849653624826678398855179782943418817848742787445677356651\r\n414711127134177785268164636176513748839942279839447924296859968539794848885533684356463555954439593863781268221271369388181642574357562743265\r\n611536446241445118338878418181629576996988228473846933586968994837546698934538846396953476435832525497728686732734122586552175272262442663133\r\n445136645672242462344751398242627287418735593239943244889649884975765755693767578936459384353596557398294979866598235442712325277834371177532\r\n424673544414738721411826382443625375866732364649396644593944376834867756999494544799638775439236624799973693897797358426152152155861441713575\r\n555177433372362752872575279262772799243879932236393654748833468664683734778638533849743486743558967623722659624718272986727336431612777474534\r\n251134621523164472212117316156795759757728937325877988894884658597537833939355653764874763639468376528684533771231888693773845486553123554466\r\n241741545731154285267167467352395644946488787922939375953476643766395885783533379935659737559668249526475773461134136531267486764686231756511\r\n325552541161751714438452217776417542243646423768568738748856899999477467784857833635398938736757523736497943185377156978847135168723257552264\r\n551217753435255178175126716549559968759795474563776669896389635946994964868968974847365356984363898397753495481351253772246783756228473637372\r\n457555573342478668274495789115477233662792923763754883877444469868789455478455784487579798534668562987638277772586525145675138311632141376414\r\n645275346434515231821981619782463795677757658737893449653989448947764676467885765847837544878653337678328353476986416829372846442522236575711\r\n742641634762633125573713753523875756787656399977834375663584476465764469745787884446876898569653645437834625452447281583575364857626251525546\r\n741611311725312235627536187451543558772639328697898644999845548568969867887478969746764344338843997492443388835456378854554531113631444112311\r\n727164641618652712662599445718727923484854274869754949535955746895484997596875877578797679366764386662628567422188824363478124511441463562621\r\n322577235332274875835158292554895984322779355698794677557585857575478567884866877584489564445936997727557482448661899234874771416721821463525\r\n315643772668527371211138843541823479744625379745397969848779864667884755864448748686684479766795799492792324484899366622369274524516161717326\r\n311677476214733428739169824285992554934432576597936496579695768969598796475595889974748784755569965668338297353711148325213772315631352445657\r\n656721337787274832729596995635446279859246763746675635956776979664666946484447964756599795858534953666272967533322755379554587463248817111226\r\n651451156831362777329288478631487765732859788954965944448448854489845966596647444548889885948734868753834339534844995916112748634753547152447\r\n247121423363326414772965577348742588683454985957943384445447597557769568865566976998676659553863748583489493699394647416988148251312582171443\r\n651273521716167475593487638573696943658563437634488549999767774666956699875789894865757895833768999687372394288996486629478125562612321362524\r\n431523418342864515549271983668255548255969785386456644846655467585699586968679597648446765744837938788576472439743378226133844584156562422123\r\n165134255521321453514985534656492334324289794986773744588575786865589768899595669969746759955939876988698255632373124743757732471757474223414\r\n573233328217864175483599711518223733453797959867397887955847646599889689998658959645746784973766479639566728769446679526544266148477845652254\r\n653657116525665525453294363316657593289974866994645449775864645895896557556876556584566679583979465333959875552336568661968274453252873453343\r\n765333123274423333881275734783695356752498534636785947544776855987878959877979666669449955554646847346973983589258387426164735436736327454755\r\n134713276571814677727324749612384259573794964436986587894958498969656976695978585554597495487469768754844829296836562145855586486725355713672\r\n376614416622344428315582632973836495664284469874895759447685487575658577679859977997497657594573393554635772395833935476814574672878282147124\r\n276234766223535818192845881717448943852358866339758994956867656658678967589797958765644447994888883373747877335976984296348331174834851772476\r\n416447666724776773953562221462767726522956455344989957987685555688895996586566897954765968779857585465366244653934631483668596116258551413314\r\n773151424156762388842145931476542972336469955976576548845445767779687557789965568946654698687845775764796982227789812453573125756173568362667\r\n141777563865243321488118282842699975324545599339879569857575486777655966555667569885468645959947658634744285989967237835318954432121766574321\r\n711126512817815634237219286117367837334757577677588587878455648556789577686666768898766749846458364894589424953336741294621441818733355473632\r\n633565244472455375172237976659932599556759987877983578758598867887896876686769566766748467447575486436738778449937157672117945155341615652215\r\n134126365218343181672443634264967379254797487855556775957598485576855988657755677686748869944535557999383365489525251137265774514335621245711\r\n643533314355736152285214457952389672745743838935375547549466946778666855798959955459549765678856735769824453958737816922252281125252158644533\r\n742312534141233258323177771696482395392666376899737945764658947665569655669778574944677449463376375584649535373872788748814814265114334331554\r\n177462261318587652415187656446396699564367799343994987694496779675685979889688778967775969856435369759759245892234993482721227235655483554734\r\n667531241352758326686596273412888547874888578497386477649779748658577958576969664866649789368994993545455558778931745357152227485287552462112\r\n713726656563756547275887969428623232893867763588783848859589767787865665469864674956769564489956453395879678452344745913796455171864485471552\r\n433116133518333472415815786263577865879534783845995778695955979879899679795665979564675669449844344353777487477816455368176337427482654324435\r\n766773546812524762135919722694372339939673777896783836576954887647789859789449785848449767448774789488279756468424625935174846531633135572142\r\n443315437177855862315719738841748993958936578734346357374994499949988676878574954677647888639869374879949537754591828573792321351411386263354\r\n735245137863885622567843175168387354868685963843893944357954767859869648749558589486568448665956385459694869733934371926633761363463285454562\r\n573352436144328541813442239471688339857922495559899385384488677795597765747654759779687938888665778835542584645863754172768252318172164624153\r\n311277727711242587773219288482537887272277983759749363698779944575578889486884856785767696453986845275578846644558154847716565773881471553144\r\n224742743154322535777552371864318529566568989763564385664383495965659948995889894853495563437484453375377945781452189787946427234526442456533\r\n313144221365245625173637376985322575873538227944553863549533884475955686444547599774693383937569856496526593746648549962681434578546373744737\r\n425657275164727116434352992416677966542822236695584548977439783364945786757485537985836467548335889253859774499226783639343573163872541543235\r\n365421366734781667427355227186369347239956466226754747469783677759364454685755374475453485853349979687822857488611921334165144344887554467347\r\n775353527655324816314759687285333349264836582437695736594855954676695499466494587366485395865775533468597256528126825733833732251881265364776\r\n232543714461237666411584266737214538593845373446367768573896866995385886645399795537457797896694425528643659923835757453325253534822371647355\r\n555557243357688288858735914876638685878757597495745656694966536859858998555984378774467686435435276748674949538356554388238787211885171426452\r\n174227563512487517235851638454623543458562798724487538736744964778436883833558855588936766877368324737894755421637286758132276626135674216641\r\n635625633773227142161548224877365583686363975883599695969784477767648483498968486996885999426638934652533861838423888737123817347657554656137\r\n446342577241352435386651876436652188585947878349438445498856448984453548839576964693946796935866797494686628473578483886466813173414743525516\r\n435425314212128658477572185685975435673526872939499337666759588998359667959469766988539853448729683659875315584847861252336376353314213724162\r\n562315235327361612118428446962157875887378346823585853466899637364755377474787433633828824398538474759956256774467291782723813321422215247441\r\n614744612135775174815612431754378115423348345259496824383968288869766349355483646957958932976974562484157658444219857744118478487745536552366\r\n226335654271711536825561658539975798321939628638255266284834355763499997987663562587546348794279987464375949355482874867226726361162621367544\r\n622315253444624212252255148278546433342747524276563333745765648493843789347539582765966355957466666814133193297854814588372633124373455673336\r\n363166427452765331557875528817446465233286528327643439948763252925298373773888776652854599924727665642461997128667546423741874137743773157164\r\n655261221511321154677736263581362246167374932634867534886432427929584295962692652272866499834654242318443154189853827683635126445776165237553\r\n463454421776315756237171154538412578322433818628592875687829744977353268555964624477292943688824216673666155594315342864537212375612436433626\r\n621342234514664545176352224461565169766991486214968946539755589869554746483539799782748652287843643968115663722331847813681151474425376315431\r\n663256453636744375612414641615155761712838892697929539439589283682424326669727838338665475775214312255421141545378133425814737712634557414642\r\n224544216374777727524321842676655857163753774874395263863322257385333883262793896656823868916849635963651696125464268351855731315753435113462\r\n362163132273722625552385182232618253462552861743984528627223328236493466927855535245554911789673583941478258486387627243337322776734171651153\r\n621363621777635215664721387858282721956322124631868394958768486726599589524965865727662965246354421559181645342738447836463126466556153516513\r\n344254325465765533754247718772361153343816164491852861765385483226447694843949588264276255447461869686511717278856821638451313575522151246366\r\n442665236215453347771765644558377585717517356438173792655437965486459822453374134891942921218347756187233418785425442651372264121163666241253\r\n352333324235411737326627418622174765742328463953546645511989189899672975483331291595415835641383997625784747452738257561235332457343315662364\r\n622551643326355434641743236686467185658282262817328784383512112726917366663943283413263497482649338286555321763811385473673247731634456544635\r\n442134113143546334744254448874566322275244311649245638412795695729968476352421765747285299765112574124553156341327482674355344661776311421653\r\n534214231342123344352565612176733158758462445861688923694471195674236825662962175499658148256754441425464217424447271353365731667425246622323\r\n364143212441213657375316164687332614628868861587957112615917185232937153238941336533263792363429655468317364264663423545415162431214163215665\r\n363212462443524535236327343738324361818868167756462849869463988751514543638392677261433828562763346548685526817787217767752647413355334664432\r\n453266144225263472766725344542622745218756646182434225597655969851861822385242428435591577997463737128511462612515463754363455725521661321156\r\n515452356611141425316656311243411462213746511331717111884571315659942622276761276265336421324455357818187752548377665477642244555653122546561\r\n234346255112326361625341174367162151248856258271747585167671626472936513312414579387552566454468266532133477263124514152535625241226421335463\r\n251536142142133324563242612562526475536821263623578163188116485732918463366826142728255653648714653243743483466465276673121154142112445664231\r\n522135411231564551123711323277721676587675683568374253282681443624815349926555556777653225364458248336468524322327764757547555236265323116245\r\n513335232535522232553324534176663252636246873474261411227456332172257318826878112264715778326267826884664415521116661547335142626622516441345\r\n213451532413246346652122761722226616447254516615513768846614744817847325622436447887284865624418575545477325521314523277216241235343231153434\r\n532434515135345213642513721672715623425618522125784536838356264218758874134551543272451538623568131436253546716372432555246335256436121353144\r\n142242523565242316151642161574757736151127776538472388812577558625262424356721184263614742113153184835664274273476167771466223524266165542533\r\n512325214636266515654324113517252451767376632261446361458623214613142362441531327543534315254237272316361517511775125622224451364514151223341\r\n553522214541662461122246223155741245347654446114623548211288111478312864142187158737183346565588333674375333267361443343651156311262315231321\r\n435455524424626261642546346735156456453463427567248281785223176282215718347344222858474783787364472351477454641646516514613366212244415224213\r\n411443112241521256422346634353273441767641273264366366264684484681735518841551115224862541666366164532313555532157246112541415512255225152144\r\n443351545152123215514236634265741577373256554325144747237124342521526576835841648447626635155525316117267262357271525221461121164132152325322\r\n423224354114431253331656364625425237646115421345551613355265561234372654475284375347431225717564515734753115753226514136246264141241151115344\r\n542415143122121546665121551453654353352523657332374475176625266555221165333222247516744536732462616154344267434661646323552443544114452311223\r\n333315235534314423533134552411343616535632651542554345756422754337652154425712736661467451751164143644756633156621515565334426321122413532245\r\n423541143413514123613346122621425421517544374642635511337125326523254146763113744563645673362352136632454642111646344253415213511252415522215\r\n442233522333334345213363632343666542634677126647213356353711151734667375537512712366641254127231572372153466425153233234513335232424333434451\r\n342413415313313451412241343613155562441347565173676453347646321222641621135527254562174155365644732512225264436332233111322524315113333344214\r\n324215434524455541453143312113335431241344446311765367142631617455764776722153747427131136177541656324451353143446635466441411121212252225322";

        private enum Direction
        {
            Up,
            Down,
            Left,
            Right,
        };

        private string PadString(string input, int length)
        {
            var padLen = length - input.Length;

            var sb = new StringBuilder();
            for (var i = 0; i < padLen; i++)
            {
                sb.Append(' ');
            }
            return sb.ToString() + input;
        }

        public void Part1()
        {
            var path = new Dictionary<(int x, int y), (Direction, long)>();
            var pathTips = new Dictionary<(int x, int y), long>();

            _input = "2413432311323\r\n3215453535623\r\n3255245654254\r\n3446585845452\r\n4546657867536\r\n1438598798454\r\n4457876987766\r\n3637877979653\r\n4654967986887\r\n4564679986453\r\n1224686865563\r\n2546548887735\r\n4322674655533";

            var map = _input
                .Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(
                    x => x
                        .Select(y => int.Parse(y.ToString()))
                        .ToArray())
                .ToArray();

            path.Add((0, 0), (0, 0));

            pathTips.Add((0, 0), 0);

            var horizontalTraveled = 0;
            var verticalTraveled = 0;

            int leftMoves = 0;
            int rightMoves = 0;
            int downMoves = 0;
            int upMoves = 0;


            while (!path.ContainsKey((map[0].Length - 1, map.Length - 1)))
            {
                var potentialNexts = new Dictionary<(int x, int y), (Direction, long)>();

                foreach (var ((x, y), distance) in pathTips)
                {
                    (Direction, long) item;
                    if (x > 0 && leftMoves < 3)
                    {
                        var nextX = x - 1;
                        var nextVal = distance + map[y][nextX];
                        if (!potentialNexts.TryGetValue((nextX, y), out item) || item.Item2 >= nextVal)
                        {
                            potentialNexts[(nextX, y)] = (Direction.Left, nextVal);
                        }
                    }

                    if (x < map[0].Length - 1 && rightMoves < 3)
                    {
                        var nextX = x + 1;
                        var nextVal = distance + map[y][nextX];
                        if (!potentialNexts.TryGetValue((nextX, y), out item) || item.Item2 >= nextVal)
                        {
                            potentialNexts[(nextX, y)] = (Direction.Right, nextVal);
                        }

                    }

                    if (y > 0 && upMoves < 3)
                    {
                        var nextY = y - 1;
                        var nextVal = distance + map[nextY][x];
                        if (!potentialNexts.TryGetValue((x, nextY), out item) || item.Item2 >= nextVal)
                        {
                            potentialNexts[(x, nextY)] = (Direction.Up, nextVal);
                        }
                    }

                    if (y < map.Length - 1 && downMoves < 3)
                    {
                        var nextY = y + 1;
                        var nextVal = distance + map[nextY][x];
                        if (!potentialNexts.TryGetValue((x, nextY), out item) || item.Item2 >= nextVal)
                        {
                            potentialNexts[(x, nextY)] = (Direction.Down, nextVal);
                        }
                    }
                }

                foreach (var (key, (_, length)) in potentialNexts)
                {
                    if (path.ContainsKey(key) && path[key].Item2 > length)
                    {
                        path.Remove(key);
                        pathTips.Remove(key);
                    }
                }
                potentialNexts = potentialNexts
                        .Where(x => !path.ContainsKey(x.Key))
                        .ToDictionary(x => x.Key, x => x.Value);

                var minNextPath = potentialNexts.Min(x => x.Value.Item2);

                var nextCoords = potentialNexts
                    .Where(x => x.Value.Item2 == minNextPath)
                    .First();

                pathTips.Add(nextCoords.Key, nextCoords.Value.Item2);

                path.Add(nextCoords.Key, nextCoords.Value);

                switch (nextCoords.Value.Item1)
                {
                    case Direction.Left:
                        rightMoves = 0;
                        upMoves = 0;
                        downMoves = 0;
                        leftMoves++;
                        break;

                    case Direction.Right:
                        rightMoves++;
                        upMoves = 0;
                        downMoves = 0;
                        leftMoves = 0;
                        break;

                    case Direction.Up:
                        rightMoves = 0;
                        upMoves++;
                        downMoves = 0;
                        leftMoves = 0;
                        break;

                    case Direction.Down:
                        rightMoves = 0;
                        upMoves = 0;
                        downMoves++;
                        leftMoves = 0;
                        break;
                }

            }

            for (int j = 0; j < map.Length; j++)
            {
                for (int i = 0; i < map[j].Length; i++)
                {
                    if (path.ContainsKey((i, j)))
                    {
                        Console.Write(PadString(path[(i, j)].Item2.ToString(), 3));
                        Console.Write(PadString(path[(i, j)].Item1.ToString(), 6));
                    }
                    else
                    {
                        Console.Write(PadString(".", 9));
                    }
                }
                Console.Write('\n');
            }
            Console.WriteLine();

            //while (pathTips.Count > 0)
            //{
            //    var shortestPath = pathTips.Min(x => x.Value);

            //    var shortestPathItemIndex = pathTips.Where(x => x.Value == shortestPath).First().Key;

            //    var shortestPathItem = pathTips[shortestPathItemIndex];
            //    pathTips.Remove(shortestPathItemIndex);

            //    var rightVal = 0;
            //    var leftVal = 0;
            //    var upVal = 0;
            //    var downVal = 0;

            //}


            //for (var col = 0; col < map.Length; col++)
            //{
            //    for (var row = 0; row < map[col].Length; row++)
            //    {
            //        if (col == 0 && row == 0) { continue; }

            //        long rowLength = long.MaxValue;
            //        long colLength = long.MaxValue;

            //        if (row > 0 && verticalTraveled < 3)
            //        {
            //            rowLength = path[(col, row - 1)] + map[col][row];
            //        }

            //        if (col > 0 && horizontalTraveled < 3)
            //        {
            //            colLength = path[(col - 1, row)] + map[col][row];
            //        }

            //        long currentValue;
            //        if (!path.TryGetValue((col, row), out currentValue))
            //        {
            //            currentValue = long.MaxValue;
            //        }


            //    }
            //}

            //for (var col = 0; col < map.Length; col++)
            //{
            //    for (var row = 0; row < map[col].Length; row++)
            //    {
            //        Console.Write(path[(col, row)]);
            //    }
            //    Console.Write('\n');
            //}

            Console.WriteLine(path.Min(x => x.Value.Item2));
        }

        public void Part2()
        {
            //_input = ".|...\\....\r\n|.-.\\.....\r\n.....|-...\r\n........|.\r\n..........\r\n.........\\\r\n..../.\\\\..\r\n.-.-/..|..\r\n.|....-|.\\\r\n..//.|....";
        }
    }
}
